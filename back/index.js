require('dotenv').config()
const express = require("express");
const mongoose = require("mongoose");
const cookieParser = require("cookie-parser");
const cors = require("cors");
const router = require('./routes/index')
const errorMiddleware = require('./middlewares/error-middleware')

const PORT = process.env.PORT || 5000;
const app = express();

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
app.use(cors({
  origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  credentials: true, 
  methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS'], 
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'Origin', 'X-Requested-With'],
  optionsSuccessStatus: 204,
}));

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Å –ª—É—á—à–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
app.use(express.json({
  limit: '10mb',
  verify: (req, res, buf, encoding) => {
    try {
      JSON.parse(buf);
    } catch (e) {
      console.error('Invalid JSON received:', buf.toString());
      throw new Error('Invalid JSON format');
    }
  }
}));
app.use(cookieParser());

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ JSON
app.use((error, req, res, next) => {
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    console.error('JSON Parse Error:', error.message);
    return res.status(400).json({
      error: 'Invalid JSON format',
      message: 'Please check your JSON syntax. Make sure all strings are properly quoted and all colons are present.',
      details: error.message
    });
  }
  next();
});

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  console.log('Origin:', req.headers.origin);
  console.log('User-Agent:', req.headers['user-agent']);
  console.log('Headers:', req.headers);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log('Body:', req.body);
  }
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS
app.options('*', (req, res) => {
  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
  res.header('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type,Authorization,Accept,Origin,X-Requested-With');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.sendStatus(200);
});

app.use('/api', router)
app.use(errorMiddleware)

const start = async () => {
  try {
    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('=====================================');
    console.log('NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('PORT:', process.env.PORT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('DB_URL:', process.env.DB_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('JWT_ACCESS_SECRET:', process.env.JWT_ACCESS_SECRET ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('JWT_REFRESH_SECRET:', process.env.JWT_REFRESH_SECRET ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('TWOGIS_API_KEY:', process.env.TWOGIS_API_KEY ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('OPENROUTER_API_KEY:', process.env.OPENROUTER_API_KEY ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('ROSREESTR_API_KEY:', process.env.ROSREESTR_API_KEY ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('CORS_ORIGIN:', process.env.CORS_ORIGIN || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('USE_EXPO_LOCATION:', process.env.USE_EXPO_LOCATION || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('USE_EXPO_MAPS:', process.env.USE_EXPO_MAPS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('LOG_LEVEL:', process.env.LOG_LEVEL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('BOOKING_API_KEY:', process.env.BOOKING_API_KEY ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('TRIPADVISOR_API_KEY:', process.env.TRIPADVISOR_API_KEY ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('=====================================');
    
    const dbUrl = process.env.DB_URL || 'mongodb://mongo:27017/rostov-ai-travel';
    console.log('Connecting to database:', dbUrl);
    await mongoose.connect(dbUrl);
    

    app.listen(PORT, '0.0.0.0', () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–µ ${PORT} –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö`);
      console.log(`–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å–∞–º:`);
      console.log(`- http://localhost:${PORT}`);
      console.log(`- http://127.0.0.1:${PORT}`);
      console.log(`- http://192.168.31.250:${PORT}`);
    });
  } catch(e) {
    console.log(e)
  }
}

start()