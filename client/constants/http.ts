import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
const DEV_BACKEND_URLS = [
  'http://localhost:5000',          // –î–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞/—Å–∏–º—É–ª—è—Ç–æ—Ä–∞
  'http://127.0.0.1:5000',          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π localhost
  'http://10.60.104.3:5000',        // –í–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π IP
  'http://10.0.2.2:5000',           // –î–ª—è Android —ç–º—É–ª—è—Ç–æ—Ä–∞
  'http://192.168.1.100:5000'       // –†–µ–∑–µ—Ä–≤–Ω—ã–π IP
];
const PROD_BACKEND_URL = 'http://10.60.104.3:5000'; // –ü—Ä–æ–¥–∞–∫—à–µ–Ω URL

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
const testURL = async (url: string): Promise<boolean> => {
  try {
    const response = await fetch(`${url}/api/test`, {
      method: 'GET',
      timeout: 3000
    });
    return response.ok;
  } catch (error) {
    console.log(`‚ùå URL ${url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ URL
const findWorkingURL = async (): Promise<string> => {
  console.log('üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–µ–∫–µ–Ω–¥–∞...');
  
  for (const url of DEV_BACKEND_URLS) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${url}`);
    const isWorking = await testURL(url);
    if (isWorking) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π URL: ${url}`);
      return url;
    }
  }
  
  console.log('‚ùå –ù–∏ –æ–¥–∏–Ω URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  return DEV_BACKEND_URLS[0];
};

const getBaseURL = async () => {
  if (__DEV__) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—â–µ–º —Ä–∞–±–æ—á–∏–π URL
    const workingURL = await findWorkingURL();
    console.log('üîß Development mode - using URL:', workingURL);
    return workingURL;
  }
  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  console.log('üöÄ Production mode - using production IP:', PROD_BACKEND_URL);
  return PROD_BACKEND_URL;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
export const getAPI_URL = getBaseURL;

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
let cachedAPI_URL: string | null = null;

export const API_URL = {
  get value() {
    if (!cachedAPI_URL) {
      console.warn('‚ö†Ô∏è API_URL –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeAPI() —Å–Ω–∞—á–∞–ª–∞.');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º /api
      return `${DEV_BACKEND_URLS[0]}/api`;
    }
    return cachedAPI_URL;
  },
  set value(url: string) {
    cachedAPI_URL = url;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API URL
export const initializeAPI = async (): Promise<string> => {
  const url = await getBaseURL();
  const apiUrl = `${url}/api`;
  API_URL.value = apiUrl;
  console.log('üîß API URL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', apiUrl);
  return apiUrl;
};

// –°–æ–∑–¥–∞–µ–º axios —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º baseURL
const $api = axios.create({
  withCredentials: false, // –î–ª—è React Native –ª—É—á—à–µ –æ—Ç–∫–ª—é—á–∏—Ç—å
  timeout: 15000, // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ baseURL
$api.interceptors.request.use(async (config) => {
  if (!config.baseURL) {
    // –ï—Å–ª–∏ API_URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /api, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    const baseURL = API_URL.value.includes('/api') ? API_URL.value : `${API_URL.value}/api`;
    config.baseURL = baseURL;
  }
  return config;
});

$api.interceptors.request.use(async (config) => {
  const token = await AsyncStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  config.headers['Content-Type'] = 'application/json';
  return config;
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
$api.interceptors.response.use(
  (response) => response,
  async (error) => {
    console.log('üåê API Error:', {
      message: error.message,
      code: error.code,
      status: error.response?.status,
      url: error.config?.url,
      baseURL: error.config?.baseURL
    });

    if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {
      console.error('‚ùå Network error:', error);
      throw new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n2. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ ${API_URL.value}\n3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞`);
    }

    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå Connection refused:', error);
      throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–µ–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${API_URL.value}`);
    }
    
    const originalRequest = error.config;
    if (error.response?.status === 401 && !originalRequest?._retry) {
      originalRequest._retry = true;
      try {
        const response = await axios.get(`${API_URL.value}/refresh`, { 
          withCredentials: true 
        });
        if (response.data.accessToken) {
          await AsyncStorage.setItem('token', response.data.accessToken);
          originalRequest.headers.Authorization = `Bearer ${response.data.accessToken}`;
          return $api(originalRequest);
        }
      } catch (refreshError) {
        console.error('Token refresh failed:', refreshError);
        await AsyncStorage.removeItem('token');
      }
    }
    return Promise.reject(error);
  }
);

export { $api };