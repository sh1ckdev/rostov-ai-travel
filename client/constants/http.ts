import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ë–∞–∑–æ–≤—ã–π URL –±–µ–∫–µ–Ω–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const BACKEND_URL = 'http://138.124.14.197:8080';
const API_BASE_URL = `${BACKEND_URL}/api`;

// AI API URL (–ë–ï–ó /api, HotelController –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç api/ –ø—Ä–µ—Ñ–∏–∫—Å)
const AI_BACKEND_URL = 'http://138.124.14.197:8082';
const AI_API_BASE_URL = AI_BACKEND_URL;

// API URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
export const API_URL = {
  get value() {
    return API_BASE_URL;
  }
};

export const AI_API_URL = {
  get value() {
    return AI_API_BASE_URL;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API URL
export const initializeAPI = async (): Promise<string> => {
  console.log('‚úÖ API URL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', API_BASE_URL);
  console.log('‚úÖ AI API URL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', AI_API_BASE_URL);
  return API_BASE_URL;
};

// –°–æ–∑–¥–∞–µ–º axios —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–≥–ª–∞—Å–Ω–æ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const $api = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: false,
  timeout: 15000, // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π axios —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è AI API —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
const $aiApi = axios.create({
  baseURL: AI_API_BASE_URL,
  withCredentials: false,
  timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤ (OpenRouter –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å)
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ interceptors (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤)
const setupInterceptors = (instance: typeof $api, apiName: string) => {
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  instance.interceptors.request.use(async (config) => {
    const token = await AsyncStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    config.headers['Content-Type'] = 'application/json';
    config.headers['Accept'] = 'application/json';
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const fullUrl = `${config.baseURL}${config.url}`;
    console.log(`üåê ${apiName} ${config.method?.toUpperCase()} –∑–∞–ø—Ä–æ—Å:`, fullUrl);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è login/register
    if (config.url?.includes('/Auth/login') || config.url?.includes('/Auth/register')) {
      console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(config.data, null, 2));
    }
    
    return config;
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  instance.interceptors.response.use(
    (response) => response,
    async (error) => {
      const isHealthCheck = error.config?.url?.includes('/Health');
      
      if (!isHealthCheck) {
        if (error.response?.status >= 500) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ ${apiName}:`, error.response?.status, error.config?.url);
        }
      }

      if (error.code === 'ECONNABORTED') {
        throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${apiName}`);
      }

      if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {
        throw new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${apiName}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É`);
      }

      if (error.code === 'ECONNREFUSED') {
        throw new Error(`${apiName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω`);
      }
      
      const originalRequest = error.config;
      const isLoginRequest = originalRequest?.url?.includes('/Auth/login');
      const isRegisterRequest = originalRequest?.url?.includes('/Auth/register');
      
      // –î–ª—è login –∏ register –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω
      if (error.response?.status === 401 && !originalRequest?._retry && !isHealthCheck && !isLoginRequest && !isRegisterRequest) {
        console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401 –¥–ª—è ${apiName}:`, originalRequest?.url);
        originalRequest._retry = true;
        
        try {
          const refreshToken = await AsyncStorage.getItem('refreshToken');
          if (refreshToken) {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...');
            const accessToken = await AsyncStorage.getItem('token');
            
            const response = await axios.post(`${API_BASE_URL}/Auth/refresh`, {
              accessToken,
              refreshToken
            });
            
            if (response.data.accessToken) {
              console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
              await AsyncStorage.setItem('token', response.data.accessToken);
              if (response.data.refreshToken) {
                await AsyncStorage.setItem('refreshToken', response.data.refreshToken);
              }
              originalRequest.headers.Authorization = `Bearer ${response.data.accessToken}`;
              return instance(originalRequest);
            }
          } else {
            console.warn('‚ö†Ô∏è Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
          }
        } catch (refreshError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshError);
          // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
          await AsyncStorage.removeItem('token');
          await AsyncStorage.removeItem('refreshToken');
          
          // –°–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const authError = new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
          authError.name = 'AuthenticationError';
          return Promise.reject(authError);
        }
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ 401 (–±–µ–∑ refresh token –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
      if (error.response?.status === 401) {
        console.warn('‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', originalRequest?.url);
      }
      
      return Promise.reject(error);
    }
  );
};

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º interceptors –¥–ª—è –æ–±–æ–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
setupInterceptors($api, 'API');
setupInterceptors($aiApi, 'AI API');

export { $api, $aiApi };