import axios from 'axios';
import { API_URL } from '@/constants/http';

export class HealthCheckService {
  private static checkInterval: ReturnType<typeof setInterval> | null = null;
  private static isHealthy: boolean = false;
  private static listeners: ((healthy: boolean) => void)[] = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∫–µ–Ω–¥–∞
  static async checkHealth(): Promise<boolean> {
    try {
      const apiUrl = API_URL.value;
      
      if (!apiUrl || apiUrl.includes('undefined')) {
        console.warn('‚ö†Ô∏è API URL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        this.isHealthy = false;
        return false;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç Health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–µ–∫–µ–Ω–¥–∞ –Ω–∞:', `${apiUrl}/Health`);
      
      const response = await axios.get(`${apiUrl}/Health`, {
        timeout: 5000,
        validateStatus: (status) => status === 200
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å status: "healthy"
      this.isHealthy = response.data && response.data.status === 'healthy';
      console.log('‚úÖ Health check successful:', this.isHealthy ? 'Backend is working!' : 'Unexpected response format');
      return this.isHealthy;
    } catch (error: any) {
      console.error('‚ùå Backend health check failed:', error.message || error);
      this.isHealthy = false;
      return false;
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç Auth (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
  static async checkHealthWithAuth(): Promise<boolean> {
    try {
      const apiUrl = API_URL.value;
      
      if (!apiUrl || apiUrl.includes('undefined')) {
        console.warn('‚ö†Ô∏è API URL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return false;
      }
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–µ–∫–µ–Ω–¥–∞ (—Å auth):', `${apiUrl}/Auth/check`);
      
      await axios.get(`${apiUrl}/Auth/check`, {
        timeout: 5000
      });
      
      console.log('‚úÖ Auth health check successful');
      return true;
    } catch (error: any) {
      // –î–∞–∂–µ –µ—Å–ª–∏ 401/403, —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (error.response && [401, 403].includes(error.response.status)) {
        console.log('‚úÖ Backend is running (auth required)');
        return true;
      }
      console.error('‚ùå Auth health check failed:', error.message || error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  static getStatus(): boolean {
    return this.isHealthy;
  }

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  static subscribe(callback: (healthy: boolean) => void): () => void {
    this.listeners.push(callback);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.listeners = this.listeners.filter(listener => listener !== callback);
    };
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  private static notify() {
    this.listeners.forEach(listener => listener(this.isHealthy));
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  static startMonitoring(interval: number = 30000) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    this.checkHealth().then(() => this.notify());

    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
    }

    this.checkInterval = setInterval(async () => {
      const wasHealthy = this.isHealthy;
      await this.checkHealth();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (wasHealthy !== this.isHealthy) {
        this.notify();
      }
    }, interval);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  static stopMonitoring() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
  }

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  static async quickCheck(): Promise<boolean> {
    try {
      const apiUrl = API_URL.value;
      
      if (!apiUrl || apiUrl.includes('undefined')) {
        console.warn('‚ö†Ô∏è API URL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
        this.isHealthy = false;
        return false;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç Health –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∫–µ–Ω–¥–∞ –Ω–∞:', `${apiUrl}/Health`);
      
      const response = await axios.get(`${apiUrl}/Health`, {
        timeout: 3000,
        validateStatus: (status) => status === 200
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å status: "healthy"
      this.isHealthy = response.data && response.data.status === 'healthy';
      console.log('‚úÖ Quick health check successful:', this.isHealthy ? 'Backend is working!' : 'Unexpected response format');
      return this.isHealthy;
    } catch (error: any) {
      console.error('‚ùå Quick health check failed:', error.message || error);
      this.isHealthy = false;
      return false;
    }
  }
}