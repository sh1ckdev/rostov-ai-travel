import axios from 'axios';
import { API_URL, initializeAPI } from '@/constants/http';

export class HealthCheckService {
  private static checkInterval: NodeJS.Timeout | null = null;
  private static isHealthy: boolean = false;
  private static listeners: Array<(healthy: boolean) => void> = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∫–µ–Ω–¥–∞
  static async checkHealth(): Promise<boolean> {
    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ API URL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!API_URL.value) {
        console.log('üîß API URL –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
        await initializeAPI();
      }
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–µ–∫–µ–Ω–¥–∞ –Ω–∞:', `${API_URL.value}/test`);
      
      const response = await axios.get(`${API_URL.value}/test`, {
        timeout: 5000,
        validateStatus: (status) => status === 200
      });
      
      this.isHealthy = response.data?.message === 'Backend is working!';
      console.log('‚úÖ Health check successful:', response.data);
      return this.isHealthy;
    } catch (error) {
      console.error('‚ùå Backend health check failed:', error);
      this.isHealthy = false;
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  static getStatus(): boolean {
    return this.isHealthy;
  }

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  static subscribe(callback: (healthy: boolean) => void): () => void {
    this.listeners.push(callback);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.listeners = this.listeners.filter(listener => listener !== callback);
    };
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  private static notify() {
    this.listeners.forEach(listener => listener(this.isHealthy));
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  static startMonitoring(interval: number = 30000) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    this.checkHealth().then(() => this.notify());

    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
    }

    this.checkInterval = setInterval(async () => {
      const wasHealthy = this.isHealthy;
      await this.checkHealth();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (wasHealthy !== this.isHealthy) {
        this.notify();
      }
    }, interval);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  static stopMonitoring() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
  }

  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  static async quickCheck(): Promise<boolean> {
    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ API URL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!API_URL.value) {
        console.log('üîß API URL –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ quickCheck, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
        await initializeAPI();
      }
      
      console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–µ–∫–µ–Ω–¥–∞ –Ω–∞:', `${API_URL.value}/test`);
      
      const response = await axios.get(`${API_URL.value}/test`, {
        timeout: 3000
      });
      this.isHealthy = response.data?.message === 'Backend is working!';
      console.log('‚úÖ Quick health check successful:', response.data);
      return this.isHealthy;
    } catch (error) {
      console.error('‚ùå Quick health check failed:', error);
      this.isHealthy = false;
      return false;
    }
  }
}

