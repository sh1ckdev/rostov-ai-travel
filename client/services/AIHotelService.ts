import { $api } from '../constants/http';
import {
  StartChatUserRequest,
  ChatMessageRequest,
  ChatResponse,
  HotelRecommendationParams,
  ApiResponse,
  MessageDto
} from '../types/api';

export interface AISession {
  sessionId: string;
  location?: string;
  createdAt: Date;
  lastActivity: Date;
  messageCount: number;
}

export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  sessionId?: string;
}

export interface AIRecommendation {
  id: string;
  title: string;
  description: string;
  category: string;
  confidence: number;
  reasoning: string;
  action?: string;
}

export class AIHotelService {
  private static currentSession: AISession | null = null;
  private static sessionHistory: AISession[] = [];

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ —Å –ò–ò
   */
  static async initializeSession(location?: string): Promise<AISession> {
    try {
      console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Å—Å–∏–∏...', { location });
      
      const requestData: StartChatUserRequest = {
        location: location || '–¢–∞–≥–∞–Ω—Ä–æ–≥'
      };

      const response = await $api.post<ChatResponse>('/HotelService/chat/start', requestData);
      
      if (!response.data.sessionId) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω sessionId –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      const session: AISession = {
        sessionId: response.data.sessionId,
        location: location || '–¢–∞–≥–∞–Ω—Ä–æ–≥',
        createdAt: new Date(),
        lastActivity: new Date(),
        messageCount: 0
      };

      this.currentSession = session;
      this.sessionHistory.unshift(session);

      console.log('‚úÖ AI —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', session.sessionId);
      return session;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Å—Å–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
   */
  static async sendMessage(message: string): Promise<ChatMessage> {
    if (!this.currentSession) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ—Å—Å–∏—é.');
    }

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI:', { message, sessionId: this.currentSession.sessionId });

      const requestData: ChatMessageRequest = {
        sessionId: this.currentSession.sessionId,
        message: message
      };

      const response = await $api.post<ChatResponse>('/HotelService/chat/send', requestData);
      
      if (!response.data.sessionId) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
      this.currentSession.lastActivity = new Date();
      this.currentSession.messageCount++;

      const aiMessage: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: response.data.response || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç',
        timestamp: new Date(),
        sessionId: this.currentSession.sessionId
      };

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', aiMessage.content);
      return aiMessage;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ sessionId
   */
  static async getChatHistory(sessionId: string): Promise<ChatMessage[]> {
    try {
      console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', sessionId);

      const response = await $api.get<ChatResponse>(`/HotelService/chat/history/${sessionId}`);
      
      if (!response.data.fullHistory) {
        return [];
      }

      const messages: ChatMessage[] = response.data.fullHistory.map((msg: MessageDto, index: number) => ({
        id: `${sessionId}_${index}`,
        role: msg.role === 'user' ? 'user' : 'assistant',
        content: msg.content || '',
        timestamp: new Date(msg.timestamp),
        sessionId: sessionId
      }));

      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', messages.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
      return messages;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–µ–ª–µ–π
   */
  static async getHotelRecommendations(location?: string): Promise<string> {
    try {
      console.log('üè® –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–µ–ª–µ–π:', location);

      const params: HotelRecommendationParams = {
        location: location || '–¢–∞–≥–∞–Ω—Ä–æ–≥'
      };

      const response = await $api.get<ApiResponse>('/HotelService/recommendation', { params });
      
      const recommendations = response.data.response || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
      console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', recommendations);
      
      return recommendations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  static getCurrentSession(): AISession | null {
    return this.currentSession;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
   */
  static getSessionHistory(): AISession[] {
    return this.sessionHistory;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  static endCurrentSession(): void {
    console.log('üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ AI —Å–µ—Å—Å–∏–∏');
    this.currentSession = null;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å–µ—Å—Å–∏—é
   */
  static async switchToSession(sessionId: string): Promise<AISession | null> {
    try {
      const session = this.sessionHistory.find(s => s.sessionId === sessionId);
      if (session) {
        this.currentSession = session;
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Å—Å–∏—é:', sessionId);
        return session;
      }
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  static isSessionActive(): boolean {
    return this.currentSession !== null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
   */
  static getSessionStats(): {
    totalSessions: number;
    currentSessionMessages: number;
    lastActivity?: Date;
  } {
    return {
      totalSessions: this.sessionHistory.length,
      currentSessionMessages: this.currentSession?.messageCount || 0,
      lastActivity: this.currentSession?.lastActivity
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π
   */
  static clearSessionHistory(): void {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π');
    this.sessionHistory = [];
    this.currentSession = null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static createWelcomeMessage(session: AISession): ChatMessage {
    return {
      id: 'welcome',
      role: 'assistant',
      content: `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç—É—Ä–∏–∑–º—É –≤ ${session.location}. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –æ—Ç–µ–ª—è–º, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º –∏ –º–∞—Ä—à—Ä—É—Ç–∞–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
      timestamp: new Date(),
      sessionId: session.sessionId
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  static createErrorMessage(error: string): ChatMessage {
    return {
      id: 'error',
      role: 'assistant',
      content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é.`,
      timestamp: new Date()
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
   */
  static createLoadingMessage(): ChatMessage {
    return {
      id: 'loading',
      role: 'assistant',
      content: '–î—É–º–∞—é... ü§î',
      timestamp: new Date()
    };
  }
}