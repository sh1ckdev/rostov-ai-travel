import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  StyleSheet,
  TouchableOpacity,
  Text,
  ActivityIndicator,
  Alert,
  ScrollView,
} from 'react-native';
import WebMapView from './WebMapView';
import { IconSymbol } from './ui/icon-symbol';
import HotelMarker from './HotelMarker';
import { MapService } from '../services/MapService';
import { Hotel } from '../types/hotel';
import { GeolocationService } from '../utils/geolocation';
import GeolocationPermission from './GeolocationPermission';

interface HotelsMapViewProps {
  userLocation?: { latitude: number; longitude: number };
  showUserLocation?: boolean;
  onHotelSelect?: (hotel: Hotel) => void;
}

const HotelsMapView: React.FC<HotelsMapViewProps> = ({
  userLocation,
  showUserLocation = true,
  onHotelSelect,
}) => {
  // mapRef –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å WebMapView
  const [hotels, setHotels] = useState<Hotel[]>([]);
  const [selectedHotel, setSelectedHotel] = useState<Hotel | null>(null);
  const [loading, setLoading] = useState(true);
  const [showPOIs, setShowPOIs] = useState(false);
  const [pois, setPois] = useState<any[]>([]);
  const [showGeolocationModal, setShowGeolocationModal] = useState(false);
  const [currentUserLocation, setCurrentUserLocation] = useState<{ latitude: number; longitude: number } | null>(userLocation || null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  const [selectedPoints, setSelectedPoints] = useState<{ latitude: number; longitude: number; name: string }[]>([]);
  const [route, setRoute] = useState<any>(null);
  const [isRouteMode, setIsRouteMode] = useState(false);

  const defaultRegion = {
    latitude: currentUserLocation?.latitude || userLocation?.latitude || 47.2357,
    longitude: currentUserLocation?.longitude || userLocation?.longitude || 39.7125,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  };

  const loadHotels = useCallback(async (coords?: { latitude: number; longitude: number }) => {
    try {
      setLoading(true);
      const coordinates = coords || userLocation || GeolocationService.getDefaultCoordinates();
      
      const hotelsData = await MapService.getHotelsForMap({
        latitude: coordinates.latitude,
        longitude: coordinates.longitude,
        radius: 10000, // 10 –∫–º
      });
      setHotels(hotelsData);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–µ–ª–∏, –ø–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –Ω–∏—Ö
      // WebMapView –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–µ–ª–µ–π:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–µ–ª–∏');
    } finally {
      setLoading(false);
    }
  }, [userLocation]);

  const initializeMap = useCallback(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (GeolocationService.isSupported()) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        setShowGeolocationModal(true);
      } else {
        // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultCoords = GeolocationService.getDefaultCoordinates();
        setCurrentUserLocation(defaultCoords);
        await loadHotels(defaultCoords);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultCoords = GeolocationService.getDefaultCoordinates();
      setCurrentUserLocation(defaultCoords);
      await loadHotels(defaultCoords);
    }
  }, [loadHotels]);

  useEffect(() => {
    initializeMap();
  }, [initializeMap]);

  const loadPOIs = async (coords?: { latitude: number; longitude: number }) => {
    try {
      const coordinates = coords || userLocation || GeolocationService.getDefaultCoordinates();
      
      const poisData = await MapService.getEnhancedPOIs(
        coordinates.latitude,
        coordinates.longitude,
        10000
      );
      setPois(poisData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ POI:', error);
    }
  };

  const handleHotelMarkerPress = (hotel: Hotel) => {
    if (isRouteMode) {
      // –í —Ä–µ–∂–∏–º–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
      const newPoint = {
        latitude: hotel.latitude,
        longitude: hotel.longitude,
        name: hotel.name
      };
      
      setSelectedPoints(prev => {
        const exists = prev.some(p => p.latitude === newPoint.latitude && p.longitude === newPoint.longitude);
        if (!exists) {
          const updated = [...prev, newPoint];
          if (updated.length >= 2) {
            buildRoute(updated);
          }
          return updated;
        }
        return prev;
      });
      
      // –í —Ä–µ–∂–∏–º–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedHotel
      console.log('üó∫Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç:', hotel.name);
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ç–µ–ª—å
      setSelectedHotel(hotel);
      if (onHotelSelect) {
        onHotelSelect(hotel);
      }
    }
  };

  const handlePermissionGranted = async (coordinates: { latitude: number; longitude: number }) => {
        setCurrentUserLocation(coordinates);
    setShowGeolocationModal(false);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–µ–ª–∏ –∏ POI –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    await Promise.all([
      loadHotels(coordinates),
      loadPOIs(coordinates)
    ]);
  };

  const handlePermissionDenied = async () => {
    setShowGeolocationModal(false);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultCoords = GeolocationService.getDefaultCoordinates();
    setCurrentUserLocation(defaultCoords);
    await loadHotels(defaultCoords);
  };

  const handleCenterOnUser = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const coords = await MapService.getUserLocation();
      setCurrentUserLocation(coords);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–µ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      await loadHotels(coords);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    }
  };

  const togglePOIs = async () => {
    if (!showPOIs && pois.length === 0) {
      await loadPOIs();
    }
    setShowPOIs(!showPOIs);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
  const buildRoute = async (points: { latitude: number; longitude: number; name: string }[]) => {
    try {
      console.log('üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏:', points);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç (–ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏)
      const routeCoordinates = points.map(point => ({
        latitude: point.latitude,
        longitude: point.longitude
      }));
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      let totalDistance = 0;
      for (let i = 0; i < routeCoordinates.length - 1; i++) {
        const distance = calculateDistance(
          routeCoordinates[i].latitude,
          routeCoordinates[i].longitude,
          routeCoordinates[i + 1].latitude,
          routeCoordinates[i + 1].longitude
        );
        totalDistance += distance;
      }
      
      const routeData = {
        coordinates: routeCoordinates,
        distance: totalDistance,
        duration: Math.round(totalDistance * 2), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (2 –º–∏–Ω/–∫–º)
        points: points
      };
      
      setRoute(routeData);
      console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:', routeData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  const toggleRouteMode = () => {
    setIsRouteMode(!isRouteMode);
    if (isRouteMode) {
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –º–∞—Ä—à—Ä—É—Ç–∞ - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setSelectedPoints([]);
      setRoute(null);
      setSelectedHotel(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–µ–ª—å
    } else {
      // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –º–∞—Ä—à—Ä—É—Ç–∞ - –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–µ–ª—å
      setSelectedHotel(null);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  const clearRoute = () => {
    setSelectedPoints([]);
    setRoute(null);
    setSelectedHotel(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–µ–ª—å
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–µ–ª–∏ –≤ POI —Ñ–æ—Ä–º–∞—Ç –¥–ª—è WebMapView
  const hotelPOIs = hotels.map(hotel => ({
    id: hotel.id,
    name: hotel.name,
    description: `${hotel.pricePerNight} ${hotel.currency}/–Ω–æ—á—å ‚Ä¢ ‚≠ê ${hotel.rating}`,
    latitude: hotel.latitude,
    longitude: hotel.longitude,
    category: 'hotel' as const,
    address: hotel.address,
    rating: hotel.rating,
    photos: hotel.images || [],
    openingHours: '',
    website: hotel.website,
    phone: hotel.phone,
  }));

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–µ–ª–∏ –∏ POI
  const allPOIs = showPOIs ? [...hotelPOIs, ...pois] : hotelPOIs;

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–∞–∫ POI
  const selectedPointsPOIs = selectedPoints.map((point, index) => ({
    id: `route-point-${index}`,
    name: `${index + 1}. ${point.name}`,
    description: `–¢–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ ${index + 1} ‚Ä¢ –í—ã–±—Ä–∞–Ω–æ`,
    latitude: point.latitude,
    longitude: point.longitude,
    category: 'route-point' as const,
    address: '',
    rating: 0,
    photos: [],
    openingHours: '',
    website: '',
    phone: '',
  }));

  const allPOIsWithRoute = [...allPOIs, ...selectedPointsPOIs];

  return (
    <View style={styles.container}>
      <WebMapView
        style={styles.map}
        initialRegion={defaultRegion}
        showUserLocation={showUserLocation}
        pois={allPOIsWithRoute}
        selectedPOIs={!isRouteMode && selectedHotel ? [hotelPOIs.find(p => p.id === selectedHotel.id)].filter(Boolean) as any[] : []}
        route={route}
        onPOISelect={(poi) => {
          if (poi.id.startsWith('route-point-')) {
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞
            return;
          }
          const hotel = hotels.find(h => h.id === poi.id);
          if (hotel) {
            handleHotelMarkerPress(hotel);
          }
        }}
      />

      {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <View style={styles.controls}>
        {/* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        <TouchableOpacity
          style={styles.controlButton}
          onPress={handleCenterOnUser}
        >
          <IconSymbol name="location.fill" size={24} color="#007AFF" />
        </TouchableOpacity>

        {/* –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å POI */}
        <TouchableOpacity
          style={[styles.controlButton, showPOIs && styles.activeControlButton]}
          onPress={togglePOIs}
        >
          <IconSymbol
            name="star.fill"
            size={24}
            color={showPOIs ? '#FFFFFF' : '#007AFF'}
          />
        </TouchableOpacity>

        {/* –û–±–Ω–æ–≤–∏—Ç—å */}
        <TouchableOpacity style={styles.controlButton} onPress={() => loadHotels()}>
          <IconSymbol name="arrow.clockwise" size={24} color="#007AFF" />
        </TouchableOpacity>

        {/* –†–µ–∂–∏–º –º–∞—Ä—à—Ä—É—Ç–∞ */}
        <TouchableOpacity
          style={[styles.controlButton, isRouteMode && styles.activeControlButton]}
          onPress={toggleRouteMode}
        >
          <IconSymbol
            name="map"
            size={24}
            color={isRouteMode ? '#FFFFFF' : '#007AFF'}
          />
        </TouchableOpacity>

        {/* –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç */}
        {route && (
          <TouchableOpacity style={styles.controlButton} onPress={clearRoute}>
            <IconSymbol name="trash" size={24} color="#FF3B30" />
          </TouchableOpacity>
        )}
      </View>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–µ–ª–µ */}
      {selectedHotel && !isRouteMode && (
        <View style={styles.selectedHotelContainer}>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            <HotelMarker
              hotel={selectedHotel}
              isSelected={true}
              onPress={() => {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
              }}
            />
          </ScrollView>
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setSelectedHotel(null)}
          >
            <IconSymbol name="xmark.circle.fill" size={24} color="#999" />
          </TouchableOpacity>
        </View>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ */}
      {route && (
        <View style={styles.routeInfoContainer}>
          <View style={styles.routeHeader}>
            <IconSymbol name="map.fill" size={20} color="#007AFF" />
            <Text style={styles.routeTitle}>–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω</Text>
            <TouchableOpacity onPress={clearRoute} style={styles.closeRouteButton}>
              <IconSymbol name="xmark.circle.fill" size={20} color="#999" />
            </TouchableOpacity>
          </View>
          
          <View style={styles.routeStats}>
            <View style={styles.routeStatItem}>
              <IconSymbol name="location.fill" size={16} color="#34C759" />
              <Text style={styles.routeStatText}>{route.points.length} —Ç–æ—á–µ–∫</Text>
            </View>
            <View style={styles.routeStatItem}>
              <IconSymbol name="ruler.fill" size={16} color="#FF9500" />
              <Text style={styles.routeStatText}>{route.distance.toFixed(1)} –∫–º</Text>
            </View>
            <View style={styles.routeStatItem}>
              <IconSymbol name="clock.fill" size={16} color="#FF3B30" />
              <Text style={styles.routeStatText}>~{route.duration} –º–∏–Ω</Text>
            </View>
          </View>
          
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.routePointsList}>
            {route.points.map((point: { latitude: number; longitude: number; name: string }, index: number) => (
              <View key={index} style={styles.routePointItem}>
                <View style={styles.routePointNumber}>
                  <Text style={styles.routePointNumberText}>{index + 1}</Text>
                </View>
                <Text style={styles.routePointName} numberOfLines={1}>
                  {point.name}
                </Text>
              </View>
            ))}
          </ScrollView>
        </View>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <IconSymbol name="bed.double.fill" size={16} color="#007AFF" />
          <Text style={styles.statText}>{hotels.length} –æ—Ç–µ–ª–µ–π</Text>
        </View>
        {showPOIs && (
          <View style={styles.statItem}>
            <IconSymbol name="star.fill" size={16} color="#FF6B6B" />
            <Text style={styles.statText}>{pois.length} POI</Text>
          </View>
        )}
        {isRouteMode && (
          <View style={styles.statItem}>
            <IconSymbol name="map.fill" size={16} color="#34C759" />
            <Text style={styles.statText}>
              –ú–∞—Ä—à—Ä—É—Ç: {selectedPoints.length} —Ç–æ—á–µ–∫
            </Text>
          </View>
        )}
      </View>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–µ–ª–µ–π...</Text>
        </View>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ */}
      <GeolocationPermission
        showModal={showGeolocationModal}
        onPermissionGranted={handlePermissionGranted}
        onPermissionDenied={handlePermissionDenied}
        onClose={() => setShowGeolocationModal(false)}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    flex: 1,
  },
  controls: {
    position: 'absolute',
    top: 16,
    right: 16,
    gap: 12,
  },
  controlButton: {
    width: 48,
    height: 48,
    backgroundColor: '#FFFFFF',
    borderRadius: 24,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  activeControlButton: {
    backgroundColor: '#007AFF',
  },
  customMarker: {
    width: 36,
    height: 36,
    borderRadius: 18,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 5,
  },
  selectedHotelContainer: {
    position: 'absolute',
    bottom: 16,
    left: 16,
    right: 16,
    backgroundColor: 'transparent',
  },
  closeButton: {
    position: 'absolute',
    top: 8,
    right: 8,
  },
  statsContainer: {
    position: 'absolute',
    bottom: 16,
    left: 16,
    flexDirection: 'row',
    gap: 12,
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  statText: {
    fontSize: 13,
    fontWeight: '600',
    color: '#333',
  },
  loadingOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingText: {
    marginTop: 12,
    fontSize: 14,
    color: '#666',
    fontWeight: '600',
  },
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  routeInfoContainer: {
    position: 'absolute',
    bottom: 120,
    left: 16,
    right: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 8,
    elevation: 5,
  },
  routeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  routeTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginLeft: 8,
    flex: 1,
  },
  closeRouteButton: {
    padding: 4,
  },
  routeStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 12,
  },
  routeStatItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  routeStatText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 4,
    fontWeight: '500',
  },
  routePointsList: {
    maxHeight: 60,
  },
  routePointItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F0F0F0',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 8,
    minWidth: 80,
  },
  routePointNumber: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 6,
  },
  routePointNumberText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  routePointName: {
    fontSize: 12,
    color: '#333',
    flex: 1,
  },
});

export default HotelsMapView;

